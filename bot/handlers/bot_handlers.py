from telebot import types

from bot.core.config import TaskState
from bot.core.config import bot
from bot.constants.constants import (
    HELP_TEXT,
)
from bot.validators.validators import list_tasks_in_str
from bot.crud.crud import (
    get_user_id, create_user,
    get_open_tasks,
)


@bot.message_handler(commands=['start'])
async def start(message):
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."""
    user_id = await get_user_id(message)

    if user_id is None:
        await create_user(message)

    await bot.send_message(
        message.chat.id,
        f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!',
    )


@bot.message_handler(commands=['help'])
async def help(message):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å."""
    await bot.send_message(
        message.chat.id,
        HELP_TEXT
    )


@bot.message_handler(commands=['create_task'])
async def create_task(message):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞—Å–∫—É"""
    await bot.set_state(
        message.from_user.id,
        TaskState.new_task, message.chat.id
    )
    await bot.send_message(
        message.chat.id,
        '–ù–∞–ø–∏—à–∏ —Ç–∞—Å–∫—É',
    )


@bot.message_handler(commands=['get_tasks'])
async def get_tasks(message):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–æ–∫"""
    tasks_title = await get_open_tasks(message)

    tasks_string = list_tasks_in_str(tasks_title)

    if not tasks_string:
        await bot.send_message(message.chat.id, '–í —Å–ø–∏—Å–∫–µ —Ç–∞—Å–∫–æ–≤ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.')
    else:
        await bot.send_message(
            message.chat.id,
            '–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å üëá'
        )
        await bot.send_message(message.chat.id, f'{tasks_string}')


@bot.message_handler(commands=['delete_task'])
async def delete_task(message):
    """–£–¥–∞–ª–∏—Ç—å —Ç–∞—Å–∫—É"""

    tasks_title = await get_open_tasks(message)

    if tasks_title == []:
        await bot.send_message(
            message.chat.id,
            '–í—Å–µ —Ç–∞—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!'
        )
        await bot.delete_state(message.from_user.id, message.chat.id)

    else:
        await bot.set_state(
            message.from_user.id,
            TaskState.del_task, message.chat.id
        )

        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

        for btn in tasks_title:
            markup.add(types.KeyboardButton(btn))

        await bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏ —Ç–∞—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.',
            reply_markup=markup)


@bot.message_handler(commands=['edit_task'])
async def edit_task(message):
    """–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Å–∫—É"""
    tasks_title = await get_open_tasks(message)

    if tasks_title == []:
        await bot.send_message(
            message.chat.id,
            '–ù–µ—Ç —Ç–∞—Å–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!'
        )

    else:
        markup = types.ReplyKeyboardMarkup(
            resize_keyboard=True,
            one_time_keyboard=True
        )

        for btn in tasks_title:
            markup.add(types.KeyboardButton(btn))

        await bot.set_state(
            message.from_user.id,
            TaskState.select_task_for_edit,
            message.chat.id
        )

        await bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏ —Ç–∞—Å–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.',
            reply_markup=markup
        )


@bot.message_handler()
async def random_text_from_user(message):
    """–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É."""
    await bot.send_message(
        message.chat.id,
        f'{message.from_user.first_name}, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è /help '
        f'—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –º–æ–≥—É –¥–µ–ª–∞—Ç—å.'
    )
